#  Remote Weather Access - Client/server solution for distributed weather networks
#   Copyright (C) 2013-2021 Ralf Rettig (info@personalfme.de)
#
#   This program is free software: you can redistribute it and/or modify
#   it under the terms of the GNU Affero General Public License as
#   published by the Free Software Foundation, either version 3 of the
#   License, or (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU Affero General Public License for more details.
#
#   You should have received a copy of the GNU Affero General Public License
#   along with this program.  If not, see <https://www.gnu.org/licenses/>.

image: python:3.9.5-buster

include:
  - template: 'Workflows/MergeRequest-Pipelines.gitlab-ci.yml'

variables:
  GCP_REGION: ${GCP_REGION_ID}
  GCP_CONTAINER_REGISTRY: ${GCP_CONTAINER_REGISTRY}
  BACKEND_PORT: 443
  FRONTEND_SERVICE_NAME: frontend-${CI_COMMIT_REF_SLUG}
  BACKEND_SERVICE_NAME: backend-${CI_COMMIT_REF_SLUG}
  PIP_CACHE_DIR: ${CI_PROJECT_DIR}/.cache/pip
  BRAND_NAME: ${BRAND_NAME}

default:
  tags:
    - docker

workflow:
  rules:
    - when: always


.python_prepare: &python_prepare
  - python3 --version
  - pip3 install virtualenv
  - virtualenv venv
  - source venv/bin/activate

.install_gettext: &install_gettext
  - apt-get update
  - apt-get install -qq -y gettext

.gcp_docker_registry_login: &gcp_docker_registry_login
  - docker login --username _json_key --password-stdin https://${GCP_CONTAINER_REGISTRY} < ${GOOGLE_APPLICATION_CREDENTIALS}

.gcp_cloud_login: &gcp_cloud_login
  - gcloud auth activate-service-account --key-file ${GOOGLE_APPLICATION_CREDENTIALS}
  - gcloud config set project ${GCP_PROJECT_ID}

.gcp_cloud_run_deploy: &gcp_cloud_run_deploy
  - envsubst < ./deployment/google_cloud_run/${TIER}_with_variables.yaml > ${TIER}.yaml
  - gcloud beta run services replace ${TIER}.yaml
    --region=${GCP_REGION}
    --platform=managed
  - service_name=${TIER^^}_SERVICE_NAME
  - gcloud run services add-iam-policy-binding ${!service_name}
    --region=${GCP_REGION}
    --platform=managed
    --member="allUsers"
    --role="roles/run.invoker"
  - export ${TIER^^}_URL=$(gcloud run services describe ${!service_name}
    --region=${GCP_REGION}
    --platform=managed
    --format='value(status.url)')

.gcp_deploy: &gcp_deploy
  image: google/cloud-sdk:338.0.0
  script:
    - *gcp_cloud_login
    - *install_gettext
    - export SQL_DATABASE_ID=${GCP_REGION}:$(gcloud sql instances list --format 'value(name)')
    - num_databases=$(wc -w <<< "$SQL_DATABASE_ID")
    - if [ $num_databases != 1 ]; then echo "ERROR, not exactly one database in GCP-project"; exit 1; fi
    - TIER=backend
    - *gcp_cloud_run_deploy
    - export BACKEND_URL_BASE=$(basename ${BACKEND_URL})
    - TIER=frontend
    - *gcp_cloud_run_deploy
    - echo "FRONTEND_URL=${FRONTEND_URL}" > frontend_deploy.env
  artifacts:
    reports:
      dotenv: frontend_deploy.env

.gcp_delete_containers: &gcp_delete_containers
  - DIGESTS=$(gcloud container images list-tags ${GCP_CONTAINER_REGISTRY}/${GCP_PROJECT_ID}/${IMAGE_NAME}
    --format 'value(digest)')
  - for DIGEST in $DIGESTS;
    do
    gcloud container images delete ${GCP_CONTAINER_REGISTRY}/${GCP_PROJECT_ID}/${IMAGE_NAME}@sha256:${DIGEST}
    --force-delete-tags
    --quiet;
    done

.copy_text_files: &copy_text_files
  - mkdir frontend/text_content
  - cp ${DATA_PROTECTION_POLICY_FILE} frontend/text_content/data-protection-policy.md
  - cp ${IMPRESS_FILE} frontend/text_content/impress.md

.publish_test_artifacts: &publish_test_artifacts
  when: always
  reports:
    junit: report.xml

before_script:
  - if [ ${CI_COMMIT_REF_NAME} == master ];
    then source deployment/environments/.production.env;
    else source deployment/environments/.testing.env;
    fi
  - export FRONTEND_SERVICE_ACCOUNT_NAME=weather-frontend@${GCP_PROJECT_ID}.iam.gserviceaccount.com
  - export BACKEND_SERVICE_ACCOUNT_NAME=weather-backend@${GCP_PROJECT_ID}.iam.gserviceaccount.com
  - export FRONTEND_SERVICE_NAME=${FRONTEND_SERVICE_NAME:0:63}
  - export BACKEND_SERVICE_NAME=${BACKEND_SERVICE_NAME:0:63}

stages:
  - test
  - build containers
  - deploy review
  - cleanup review
  - deploy production

unittests backend:
  stage: test
  cache:
    paths:
      - .cache/pip
      - venv/
  services:
    - postgres:13.0-alpine
  before_script:
    - *python_prepare
    - pip3 install -r backend/requirements.txt
    - pip3 install -r backend/dev-requirements.txt
  variables:
    POSTGRES_DB: postgres
    POSTGRES_USER: postgres
    POSTGRES_PASSWORD: passwd
    POSTGRES_TEST_URL: postgres  # the URL provided by the service
  script:
    - export PYTHONPATH=${CI_PROJECT_DIR}/backend
    - pytest backend/tests/unit_tests --junitxml=report.xml
  artifacts:
    <<: *publish_test_artifacts

unittests frontend:
  stage: test
  cache:
    paths:
      - .cache/pip
      - venv/
  before_script:
    - *python_prepare
    - pip3 install -r frontend/requirements.txt
    - pip3 install -r frontend/dev-requirements.txt
  script:
    - export PYTHONPATH=${CI_PROJECT_DIR}/frontend
    - pytest frontend/tests/unit_tests --junitxml=report.xml
  artifacts:
    <<: *publish_test_artifacts

build backend:
  stage: build containers
  image: docker:20.10.6
  services:
    - docker:20.10.6-dind
  script:
    - docker build -t ${GCP_CONTAINER_REGISTRY}/${GCP_PROJECT_ID}/${BACKEND_SERVICE_NAME}:${CI_COMMIT_SHA}
      --file=./Dockerfile.backend .
    - *gcp_docker_registry_login
    - docker push ${GCP_CONTAINER_REGISTRY}/${GCP_PROJECT_ID}/${BACKEND_SERVICE_NAME}:${CI_COMMIT_SHA}

build frontend:
  stage: build containers
  image: docker:20.10.6
  services:
    - docker:20.10.6-dind
  script:
    - *copy_text_files
    - docker build -t ${GCP_CONTAINER_REGISTRY}/${GCP_PROJECT_ID}/${FRONTEND_SERVICE_NAME}:${CI_COMMIT_SHA}
      --file=./Dockerfile.frontend .
    - *gcp_docker_registry_login
    - docker push ${GCP_CONTAINER_REGISTRY}/${GCP_PROJECT_ID}/${FRONTEND_SERVICE_NAME}:${CI_COMMIT_SHA}

deploy review:
  stage: deploy review
  <<: *gcp_deploy
  environment:
    name: review/${CI_COMMIT_REF_NAME}
    url: $FRONTEND_URL
    on_stop: stop review
  rules:
    - if: '$CI_MERGE_REQUEST_ID || $CI_COMMIT_BRANCH != "master"'

stop review:
  stage: cleanup review
  dependencies:
    - deploy review
  image: google/cloud-sdk:338.0.0
  script:
    - *gcp_cloud_login
    - gcloud run services delete ${FRONTEND_SERVICE_NAME}
      --region=${GCP_REGION}
      --platform=managed
      --quiet
    - gcloud run services delete ${BACKEND_SERVICE_NAME}
      --region=${GCP_REGION}
      --platform=managed
      --quiet
    - IMAGE_NAME=${FRONTEND_SERVICE_NAME}
    - *gcp_delete_containers
    - IMAGE_NAME=${BACKEND_SERVICE_NAME}
    - *gcp_delete_containers
  environment:
    name: review/${CI_COMMIT_REF_NAME}
    action: stop
  rules:
    - if: '$CI_MERGE_REQUEST_ID || $CI_COMMIT_BRANCH != "master"'
      when: manual
      allow_failure: true

deploy production:
  stage: deploy production
  <<: *gcp_deploy
  environment:
    name: production
    url: $FRONTEND_URL
  only:
    - master
